import * as Dotenv from 'dotenv';
import * as fs from 'fs';

// eslint-disable-next-line @typescript-eslint/no-var-requires
const swaggerAutogen = require('swagger-autogen')();

class SwaggerGenerate {
    private readonly swaggerOutputFile = './build/swaggerOutput.json';
    private readonly endpointsFiles = ['./src/controllers/Routes.ts'];

    constructor() {
        Dotenv.config();
    }

    public generate(): void {
        let host = process.env.SERVER_HOST;
        const port = Number(process.env.SERVER_PORT || 80);
        if (port !== 80) {
            host += ':' + port;
        }

        const config = {
            basePath: '/',
            consumes: ['application/json'],
            definitions: {
                Secretary: {
                    $emails: ['email@email.com', 'email@email.com'],
                    $name: 'Secretaria de SC',
                },
                ZoneCreate: {
                    $secretary: {
                        $ref:'#/definitions/Secretary',
                    },
                    $state: {
                        id: 1,
                    },
                    cities: [
                        { id: 1 },
                    ],
                },
            },
            host,
            info: {
                description: 'Documentation automatically generated by the <b>swagger-autogen</b> module.',
                title: process.env.SERVER_NAME,
                version: '0.1.0',
            },
            produces: ['application/json'],
            schemes: ['http', 'https'],
            securityDefinitions: {
                apiKeyAuth: {
                    // name of the header, query parameter or cookie
                    description: 'Bearer jwt token',
                    in: 'header', // can be 'header', 'query' or 'cookie'
                    name: 'authorization', type: 'apiKey',
                },
                basicApiKeyAuth: {
                    // name of the header, query parameter or cookie
                    description: 'Basic Base64(register:senha)',
                    in: 'header', // can be 'header', 'query' or 'cookie'
                    name: 'authorization', type: 'apiKey',
                },
            },
        };

        try {
            if (!fs.existsSync(this.swaggerOutputFile)) {
                fs.writeFileSync(this.swaggerOutputFile, '{"swagger": "2.0"}');
            }

            swaggerAutogen(this.swaggerOutputFile, this.endpointsFiles, config).then((result: {success: boolean, data: any}|boolean) => {
                if (result && typeof result !== 'boolean' && result.success) {
                    console.log('Swagger generated');
                } else {
                    const json = JSON.stringify(result);
                    console.error('SwaggerError ' + json);
                    throw new Error('SwaggerError ' + json);
                }
            });
        } catch (err) {
            console.error(err);
            throw new Error(JSON.stringify(err));
        }
    }
}
new SwaggerGenerate().generate();
